/* automatically generated by rust-bindgen */

pub const NDILIB_LIBRARY_NAME: &'static [u8; 12usize] = b"libndi.so.3\0";
pub const NDILIB_REDIST_FOLDER: &'static [u8; 19usize] = b"NDI_RUNTIME_DIR_V3\0";
pub const NDILIB_REDIST_URL: &'static [u8; 1usize] = b"\0";
pub const NDILIB_CPP_DEFAULT_CONSTRUCTORS: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INFINITE: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const NDIlib_frame_type_none: _bindgen_ty_1 = 0;
pub const NDIlib_frame_type_video: _bindgen_ty_1 = 1;
pub const NDIlib_frame_type_audio: _bindgen_ty_1 = 2;
pub const NDIlib_frame_type_metadata: _bindgen_ty_1 = 3;
pub const NDIlib_frame_type_error: _bindgen_ty_1 = 4;
pub const NDIlib_frame_type_status_change: _bindgen_ty_1 = 100;
pub type _bindgen_ty_1 = u32;
pub type NDIlib_frame_type_e = u32;
pub const NDIlib_FourCC_type_UYVY: _bindgen_ty_2 = 1498831189;
pub const NDIlib_FourCC_type_YV12: _bindgen_ty_2 = 842094169;
pub const NDIlib_FourCC_type_NV12: _bindgen_ty_2 = 842094158;
pub const NDIlib_FourCC_type_I420: _bindgen_ty_2 = 808596553;
pub const NDIlib_FourCC_type_BGRA: _bindgen_ty_2 = 1095911234;
pub const NDIlib_FourCC_type_BGRX: _bindgen_ty_2 = 1481787202;
pub const NDIlib_FourCC_type_RGBA: _bindgen_ty_2 = 1094862674;
pub const NDIlib_FourCC_type_RGBX: _bindgen_ty_2 = 1480738642;
pub const NDIlib_FourCC_type_UYVA: _bindgen_ty_2 = 1096178005;
pub type _bindgen_ty_2 = u32;
pub type NDIlib_FourCC_type_e = u32;
pub const NDIlib_frame_format_type_progressive: _bindgen_ty_3 = 1;
pub const NDIlib_frame_format_type_interleaved: _bindgen_ty_3 = 0;
pub const NDIlib_frame_format_type_field_0: _bindgen_ty_3 = 2;
pub const NDIlib_frame_format_type_field_1: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = u32;
pub type NDIlib_frame_format_type_e = u32;
pub const NDIlib_send_timecode_synthesize: i64 = 9223372036854775807;
pub const NDIlib_recv_timestamp_undefined: i64 = 9223372036854775807;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_source_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: NDIlib_source_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NDIlib_source_t__bindgen_ty_1 {
    pub p_url_address: *const ::std::os::raw::c_char,
    pub p_ip_address: *const ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_NDIlib_source_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_source_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(NDIlib_source_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_source_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_source_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_source_t__bindgen_ty_1>())).p_url_address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_source_t__bindgen_ty_1),
            "::",
            stringify!(p_url_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_source_t__bindgen_ty_1>())).p_ip_address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_source_t__bindgen_ty_1),
            "::",
            stringify!(p_ip_address)
        )
    );
}
#[test]
fn bindgen_test_layout_NDIlib_source_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_source_t>(),
        16usize,
        concat!("Size of: ", stringify!(NDIlib_source_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_source_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_source_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_source_t>())).p_ndi_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_source_t),
            "::",
            stringify!(p_ndi_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_video_frame_v2_t {
    pub xres: ::std::os::raw::c_int,
    pub yres: ::std::os::raw::c_int,
    pub FourCC: NDIlib_FourCC_type_e,
    pub frame_rate_N: ::std::os::raw::c_int,
    pub frame_rate_D: ::std::os::raw::c_int,
    pub picture_aspect_ratio: f32,
    pub frame_format_type: NDIlib_frame_format_type_e,
    pub timecode: i64,
    pub p_data: *mut u8,
    pub line_stride_in_bytes: ::std::os::raw::c_int,
    pub p_metadata: *const ::std::os::raw::c_char,
    pub timestamp: i64,
}
#[test]
fn bindgen_test_layout_NDIlib_video_frame_v2_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_video_frame_v2_t>(),
        72usize,
        concat!("Size of: ", stringify!(NDIlib_video_frame_v2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_video_frame_v2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_video_frame_v2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).xres as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(xres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).yres as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(yres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).FourCC as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(FourCC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).frame_rate_N as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(frame_rate_N)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).frame_rate_D as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(frame_rate_D)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).picture_aspect_ratio as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(picture_aspect_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).frame_format_type as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(frame_format_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).timecode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).p_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(p_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).line_stride_in_bytes as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(line_stride_in_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).p_metadata as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(p_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_video_frame_v2_t>())).timestamp as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_video_frame_v2_t),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_v2_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut f32,
    pub channel_stride_in_bytes: ::std::os::raw::c_int,
    pub p_metadata: *const ::std::os::raw::c_char,
    pub timestamp: i64,
}
#[test]
fn bindgen_test_layout_NDIlib_audio_frame_v2_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_audio_frame_v2_t>(),
        56usize,
        concat!("Size of: ", stringify!(NDIlib_audio_frame_v2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_audio_frame_v2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_audio_frame_v2_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).sample_rate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).no_channels as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(no_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).no_samples as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(no_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).timecode as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).p_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(p_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).channel_stride_in_bytes as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(channel_stride_in_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).p_metadata as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(p_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_v2_t>())).timestamp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_v2_t),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_metadata_frame_t {
    pub length: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NDIlib_metadata_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_metadata_frame_t>(),
        24usize,
        concat!("Size of: ", stringify!(NDIlib_metadata_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_metadata_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_metadata_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_metadata_frame_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_metadata_frame_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_metadata_frame_t>())).timecode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_metadata_frame_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_metadata_frame_t>())).p_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_metadata_frame_t),
            "::",
            stringify!(p_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_tally_t {
    pub on_program: bool,
    pub on_preview: bool,
}
#[test]
fn bindgen_test_layout_NDIlib_tally_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_tally_t>(),
        2usize,
        concat!("Size of: ", stringify!(NDIlib_tally_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_tally_t>(),
        1usize,
        concat!("Alignment of ", stringify!(NDIlib_tally_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_tally_t>())).on_program as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_tally_t),
            "::",
            stringify!(on_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_tally_t>())).on_preview as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_tally_t),
            "::",
            stringify!(on_preview)
        )
    );
}
extern "C" {
    pub fn NDIlib_initialize() -> bool;
}
extern "C" {
    pub fn NDIlib_destroy();
}
extern "C" {
    pub fn NDIlib_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NDIlib_is_supported_CPU() -> bool;
}
pub type NDIlib_find_instance_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_find_create_t {
    pub show_local_sources: bool,
    pub p_groups: *const ::std::os::raw::c_char,
    pub p_extra_ips: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NDIlib_find_create_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_find_create_t>(),
        24usize,
        concat!("Size of: ", stringify!(NDIlib_find_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_find_create_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_find_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_find_create_t>())).show_local_sources as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_find_create_t),
            "::",
            stringify!(show_local_sources)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_find_create_t>())).p_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_find_create_t),
            "::",
            stringify!(p_groups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_find_create_t>())).p_extra_ips as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_find_create_t),
            "::",
            stringify!(p_extra_ips)
        )
    );
}
extern "C" {
    pub fn NDIlib_find_create_v2(
        p_create_settings: *const NDIlib_find_create_t,
    ) -> NDIlib_find_instance_t;
}
extern "C" {
    pub fn NDIlib_find_create_v3(
        p_create_settings: *const NDIlib_find_create_t,
        p_config_data: *const ::std::os::raw::c_char,
    ) -> NDIlib_find_instance_t;
}
extern "C" {
    pub fn NDIlib_find_destroy(p_instance: NDIlib_find_instance_t);
}
extern "C" {
    pub fn NDIlib_find_get_current_sources(
        p_instance: NDIlib_find_instance_t,
        p_no_sources: *mut u32,
    ) -> *const NDIlib_source_t;
}
extern "C" {
    pub fn NDIlib_find_wait_for_sources(
        p_instance: NDIlib_find_instance_t,
        timeout_in_ms: u32,
    ) -> bool;
}
pub type NDIlib_recv_instance_t = *mut ::std::os::raw::c_void;
pub const NDIlib_recv_bandwidth_metadata_only: _bindgen_ty_4 = -10;
pub const NDIlib_recv_bandwidth_audio_only: _bindgen_ty_4 = 10;
pub const NDIlib_recv_bandwidth_lowest: _bindgen_ty_4 = 0;
pub const NDIlib_recv_bandwidth_highest: _bindgen_ty_4 = 100;
pub type _bindgen_ty_4 = i32;
pub type NDIlib_recv_bandwidth_e = i32;
pub const NDIlib_recv_color_format_BGRX_BGRA: _bindgen_ty_5 = 0;
pub const NDIlib_recv_color_format_UYVY_BGRA: _bindgen_ty_5 = 1;
pub const NDIlib_recv_color_format_RGBX_RGBA: _bindgen_ty_5 = 2;
pub const NDIlib_recv_color_format_UYVY_RGBA: _bindgen_ty_5 = 3;
pub const NDIlib_recv_color_format_fastest: _bindgen_ty_5 = 100;
pub const NDIlib_recv_color_format_e_BGRX_BGRA: _bindgen_ty_5 = 0;
pub const NDIlib_recv_color_format_e_UYVY_BGRA: _bindgen_ty_5 = 1;
pub const NDIlib_recv_color_format_e_RGBX_RGBA: _bindgen_ty_5 = 2;
pub const NDIlib_recv_color_format_e_UYVY_RGBA: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = u32;
pub type NDIlib_recv_color_format_e = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_recv_create_v3_t {
    pub source_to_connect_to: NDIlib_source_t,
    pub color_format: NDIlib_recv_color_format_e,
    pub bandwidth: NDIlib_recv_bandwidth_e,
    pub allow_video_fields: bool,
    pub p_ndi_recv_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NDIlib_recv_create_v3_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_recv_create_v3_t>(),
        40usize,
        concat!("Size of: ", stringify!(NDIlib_recv_create_v3_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_recv_create_v3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_recv_create_v3_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_create_v3_t>())).source_to_connect_to as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_create_v3_t),
            "::",
            stringify!(source_to_connect_to)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_create_v3_t>())).color_format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_create_v3_t),
            "::",
            stringify!(color_format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_create_v3_t>())).bandwidth as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_create_v3_t),
            "::",
            stringify!(bandwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_create_v3_t>())).allow_video_fields as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_create_v3_t),
            "::",
            stringify!(allow_video_fields)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_create_v3_t>())).p_ndi_recv_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_create_v3_t),
            "::",
            stringify!(p_ndi_recv_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_performance_t {
    pub video_frames: i64,
    pub audio_frames: i64,
    pub metadata_frames: i64,
}
#[test]
fn bindgen_test_layout_NDIlib_recv_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_recv_performance_t>(),
        24usize,
        concat!("Size of: ", stringify!(NDIlib_recv_performance_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_recv_performance_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_recv_performance_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_performance_t>())).video_frames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_performance_t),
            "::",
            stringify!(video_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_performance_t>())).audio_frames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_performance_t),
            "::",
            stringify!(audio_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_performance_t>())).metadata_frames as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_performance_t),
            "::",
            stringify!(metadata_frames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_queue_t {
    pub video_frames: ::std::os::raw::c_int,
    pub audio_frames: ::std::os::raw::c_int,
    pub metadata_frames: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NDIlib_recv_queue_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_recv_queue_t>(),
        12usize,
        concat!("Size of: ", stringify!(NDIlib_recv_queue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_recv_queue_t>(),
        4usize,
        concat!("Alignment of ", stringify!(NDIlib_recv_queue_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_queue_t>())).video_frames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_queue_t),
            "::",
            stringify!(video_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_queue_t>())).audio_frames as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_queue_t),
            "::",
            stringify!(audio_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_queue_t>())).metadata_frames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_queue_t),
            "::",
            stringify!(metadata_frames)
        )
    );
}
extern "C" {
    pub fn NDIlib_recv_create_v3(
        p_create_settings: *const NDIlib_recv_create_v3_t,
    ) -> NDIlib_recv_instance_t;
}
extern "C" {
    pub fn NDIlib_recv_create_v4(
        p_create_settings: *const NDIlib_recv_create_v3_t,
        p_config_data: *const ::std::os::raw::c_char,
    ) -> NDIlib_recv_instance_t;
}
extern "C" {
    pub fn NDIlib_recv_destroy(p_instance: NDIlib_recv_instance_t);
}
extern "C" {
    pub fn NDIlib_recv_connect(p_instance: NDIlib_recv_instance_t, p_src: *const NDIlib_source_t);
}
extern "C" {
    pub fn NDIlib_recv_capture_v2(
        p_instance: NDIlib_recv_instance_t,
        p_video_data: *mut NDIlib_video_frame_v2_t,
        p_audio_data: *mut NDIlib_audio_frame_v2_t,
        p_metadata: *mut NDIlib_metadata_frame_t,
        timeout_in_ms: u32,
    ) -> NDIlib_frame_type_e;
}
extern "C" {
    pub fn NDIlib_recv_free_video_v2(
        p_instance: NDIlib_recv_instance_t,
        p_video_data: *const NDIlib_video_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_free_audio_v2(
        p_instance: NDIlib_recv_instance_t,
        p_audio_data: *const NDIlib_audio_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_free_metadata(
        p_instance: NDIlib_recv_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_free_string(
        p_instance: NDIlib_recv_instance_t,
        p_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn NDIlib_recv_send_metadata(
        p_instance: NDIlib_recv_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_set_tally(
        p_instance: NDIlib_recv_instance_t,
        p_tally: *const NDIlib_tally_t,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_get_performance(
        p_instance: NDIlib_recv_instance_t,
        p_total: *mut NDIlib_recv_performance_t,
        p_dropped: *mut NDIlib_recv_performance_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_get_queue(
        p_instance: NDIlib_recv_instance_t,
        p_total: *mut NDIlib_recv_queue_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_clear_connection_metadata(p_instance: NDIlib_recv_instance_t);
}
extern "C" {
    pub fn NDIlib_recv_add_connection_metadata(
        p_instance: NDIlib_recv_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    );
}
extern "C" {
    pub fn NDIlib_recv_get_no_connections(
        p_instance: NDIlib_recv_instance_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NDIlib_recv_get_web_control(
        p_instance: NDIlib_recv_instance_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NDIlib_recv_ptz_is_supported(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_is_supported(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_zoom(p_instance: NDIlib_recv_instance_t, zoom_value: f32) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_zoom_speed(p_instance: NDIlib_recv_instance_t, zoom_speed: f32) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_pan_tilt(
        p_instance: NDIlib_recv_instance_t,
        pan_value: f32,
        tilt_value: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_pan_tilt_speed(
        p_instance: NDIlib_recv_instance_t,
        pan_speed: f32,
        tilt_speed: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_store_preset(
        p_instance: NDIlib_recv_instance_t,
        preset_no: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_recall_preset(
        p_instance: NDIlib_recv_instance_t,
        preset_no: ::std::os::raw::c_int,
        speed: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_auto_focus(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_focus(p_instance: NDIlib_recv_instance_t, focus_value: f32) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_focus_speed(
        p_instance: NDIlib_recv_instance_t,
        focus_speed: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_white_balance_auto(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_white_balance_indoor(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_white_balance_outdoor(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_white_balance_oneshot(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_white_balance_manual(
        p_instance: NDIlib_recv_instance_t,
        red: f32,
        blue: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_exposure_auto(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_ptz_exposure_manual(
        p_instance: NDIlib_recv_instance_t,
        exposure_level: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_start(
        p_instance: NDIlib_recv_instance_t,
        p_filename_hint: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_stop(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_set_audio_level(
        p_instance: NDIlib_recv_instance_t,
        level_dB: f32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_is_recording(p_instance: NDIlib_recv_instance_t) -> bool;
}
extern "C" {
    pub fn NDIlib_recv_recording_get_filename(
        p_instance: NDIlib_recv_instance_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NDIlib_recv_recording_get_error(
        p_instance: NDIlib_recv_instance_t,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_recording_time_t {
    pub no_frames: i64,
    pub start_time: i64,
    pub last_time: i64,
}
#[test]
fn bindgen_test_layout_NDIlib_recv_recording_time_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_recv_recording_time_t>(),
        24usize,
        concat!("Size of: ", stringify!(NDIlib_recv_recording_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_recv_recording_time_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_recv_recording_time_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_recording_time_t>())).no_frames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_recording_time_t),
            "::",
            stringify!(no_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_recording_time_t>())).start_time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_recording_time_t),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_recv_recording_time_t>())).last_time as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_recv_recording_time_t),
            "::",
            stringify!(last_time)
        )
    );
}
extern "C" {
    pub fn NDIlib_recv_recording_get_times(
        p_instance: NDIlib_recv_instance_t,
        p_times: *mut NDIlib_recv_recording_time_t,
    ) -> bool;
}
pub type NDIlib_send_instance_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_send_create_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub p_groups: *const ::std::os::raw::c_char,
    pub clock_video: bool,
    pub clock_audio: bool,
}
#[test]
fn bindgen_test_layout_NDIlib_send_create_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_send_create_t>(),
        24usize,
        concat!("Size of: ", stringify!(NDIlib_send_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_send_create_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_send_create_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_send_create_t>())).p_ndi_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_send_create_t),
            "::",
            stringify!(p_ndi_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NDIlib_send_create_t>())).p_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_send_create_t),
            "::",
            stringify!(p_groups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_send_create_t>())).clock_video as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_send_create_t),
            "::",
            stringify!(clock_video)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_send_create_t>())).clock_audio as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_send_create_t),
            "::",
            stringify!(clock_audio)
        )
    );
}
extern "C" {
    pub fn NDIlib_send_create(
        p_create_settings: *const NDIlib_send_create_t,
    ) -> NDIlib_send_instance_t;
}
extern "C" {
    pub fn NDIlib_send_create_v2(
        p_create_settings: *const NDIlib_send_create_t,
        p_config_data: *const ::std::os::raw::c_char,
    ) -> NDIlib_send_instance_t;
}
extern "C" {
    pub fn NDIlib_send_destroy(p_instance: NDIlib_send_instance_t);
}
extern "C" {
    pub fn NDIlib_send_send_video_v2(
        p_instance: NDIlib_send_instance_t,
        p_video_data: *const NDIlib_video_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_send_send_video_async_v2(
        p_instance: NDIlib_send_instance_t,
        p_video_data: *const NDIlib_video_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_send_send_audio_v2(
        p_instance: NDIlib_send_instance_t,
        p_audio_data: *const NDIlib_audio_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_send_send_metadata(
        p_instance: NDIlib_send_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    );
}
extern "C" {
    pub fn NDIlib_send_capture(
        p_instance: NDIlib_send_instance_t,
        p_metadata: *mut NDIlib_metadata_frame_t,
        timeout_in_ms: u32,
    ) -> NDIlib_frame_type_e;
}
extern "C" {
    pub fn NDIlib_send_free_metadata(
        p_instance: NDIlib_send_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    );
}
extern "C" {
    pub fn NDIlib_send_get_tally(
        p_instance: NDIlib_send_instance_t,
        p_tally: *mut NDIlib_tally_t,
        timeout_in_ms: u32,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_send_get_no_connections(
        p_instance: NDIlib_send_instance_t,
        timeout_in_ms: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NDIlib_send_clear_connection_metadata(p_instance: NDIlib_send_instance_t);
}
extern "C" {
    pub fn NDIlib_send_add_connection_metadata(
        p_instance: NDIlib_send_instance_t,
        p_metadata: *const NDIlib_metadata_frame_t,
    );
}
extern "C" {
    pub fn NDIlib_send_set_failover(
        p_instance: NDIlib_send_instance_t,
        p_failover_source: *const NDIlib_source_t,
    );
}
pub type NDIlib_routing_instance_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_routing_create_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub p_groups: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_NDIlib_routing_create_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_routing_create_t>(),
        16usize,
        concat!("Size of: ", stringify!(NDIlib_routing_create_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_routing_create_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NDIlib_routing_create_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_routing_create_t>())).p_ndi_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_routing_create_t),
            "::",
            stringify!(p_ndi_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_routing_create_t>())).p_groups as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_routing_create_t),
            "::",
            stringify!(p_groups)
        )
    );
}
extern "C" {
    pub fn NDIlib_routing_create(
        p_create_settings: *const NDIlib_routing_create_t,
    ) -> NDIlib_routing_instance_t;
}
extern "C" {
    pub fn NDIlib_routing_destroy(p_instance: NDIlib_routing_instance_t);
}
extern "C" {
    pub fn NDIlib_routing_change(
        p_instance: NDIlib_routing_instance_t,
        p_source: *const NDIlib_source_t,
    ) -> bool;
}
extern "C" {
    pub fn NDIlib_routing_clear(p_instance: NDIlib_routing_instance_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_16s_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub reference_level: ::std::os::raw::c_int,
    pub p_data: *mut i16,
}
#[test]
fn bindgen_test_layout_NDIlib_audio_frame_interleaved_16s_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_audio_frame_interleaved_16s_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_audio_frame_interleaved_16s_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).sample_rate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).no_channels as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(no_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).no_samples as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(no_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).timecode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).reference_level
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(reference_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_16s_t>())).p_data as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_16s_t),
            "::",
            stringify!(p_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_32s_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub reference_level: ::std::os::raw::c_int,
    pub p_data: *mut i32,
}
#[test]
fn bindgen_test_layout_NDIlib_audio_frame_interleaved_32s_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_audio_frame_interleaved_32s_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_audio_frame_interleaved_32s_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).sample_rate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).no_channels as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(no_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).no_samples as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(no_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).timecode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).reference_level
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(reference_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32s_t>())).p_data as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32s_t),
            "::",
            stringify!(p_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_32f_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut f32,
}
#[test]
fn bindgen_test_layout_NDIlib_audio_frame_interleaved_32f_t() {
    assert_eq!(
        ::std::mem::size_of::<NDIlib_audio_frame_interleaved_32f_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NDIlib_audio_frame_interleaved_32f_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32f_t>())).sample_rate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32f_t>())).no_channels as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t),
            "::",
            stringify!(no_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32f_t>())).no_samples as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t),
            "::",
            stringify!(no_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32f_t>())).timecode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t),
            "::",
            stringify!(timecode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NDIlib_audio_frame_interleaved_32f_t>())).p_data as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NDIlib_audio_frame_interleaved_32f_t),
            "::",
            stringify!(p_data)
        )
    );
}
extern "C" {
    pub fn NDIlib_util_send_send_audio_interleaved_16s(
        p_instance: NDIlib_send_instance_t,
        p_audio_data: *const NDIlib_audio_frame_interleaved_16s_t,
    );
}
extern "C" {
    pub fn NDIlib_util_send_send_audio_interleaved_32s(
        p_instance: NDIlib_send_instance_t,
        p_audio_data: *const NDIlib_audio_frame_interleaved_32s_t,
    );
}
extern "C" {
    pub fn NDIlib_util_send_send_audio_interleaved_32f(
        p_instance: NDIlib_send_instance_t,
        p_audio_data: *const NDIlib_audio_frame_interleaved_32f_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_to_interleaved_16s_v2(
        p_src: *const NDIlib_audio_frame_v2_t,
        p_dst: *mut NDIlib_audio_frame_interleaved_16s_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_from_interleaved_16s_v2(
        p_src: *const NDIlib_audio_frame_interleaved_16s_t,
        p_dst: *mut NDIlib_audio_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_to_interleaved_32s_v2(
        p_src: *const NDIlib_audio_frame_v2_t,
        p_dst: *mut NDIlib_audio_frame_interleaved_32s_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_from_interleaved_32s_v2(
        p_src: *const NDIlib_audio_frame_interleaved_32s_t,
        p_dst: *mut NDIlib_audio_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_to_interleaved_32f_v2(
        p_src: *const NDIlib_audio_frame_v2_t,
        p_dst: *mut NDIlib_audio_frame_interleaved_32f_t,
    );
}
extern "C" {
    pub fn NDIlib_util_audio_from_interleaved_32f_v2(
        p_src: *const NDIlib_audio_frame_interleaved_32f_t,
        p_dst: *mut NDIlib_audio_frame_v2_t,
    );
}
pub type NDIlib_framesync_instance_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn NDIlib_framesync_create(
        p_receiver: NDIlib_recv_instance_t,
    ) -> NDIlib_framesync_instance_t;
}
extern "C" {
    pub fn NDIlib_framesync_destroy(p_instance: NDIlib_framesync_instance_t);
}
extern "C" {
    pub fn NDIlib_framesync_capture_audio(
        p_instance: NDIlib_framesync_instance_t,
        p_audio_data: *mut NDIlib_audio_frame_v2_t,
        sample_rate: ::std::os::raw::c_int,
        no_channels: ::std::os::raw::c_int,
        no_samples: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn NDIlib_framesync_free_audio(
        p_instance: NDIlib_framesync_instance_t,
        p_audio_data: *mut NDIlib_audio_frame_v2_t,
    );
}
extern "C" {
    pub fn NDIlib_framesync_capture_video(
        p_instance: NDIlib_framesync_instance_t,
        p_video_data: *mut NDIlib_video_frame_v2_t,
        field_type: NDIlib_frame_format_type_e,
    );
}
extern "C" {
    pub fn NDIlib_framesync_free_video(
        p_instance: NDIlib_framesync_instance_t,
        p_video_data: *mut NDIlib_video_frame_v2_t,
    );
}
